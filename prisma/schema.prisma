// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  username      String          @unique
  password      String
  role          Role            @default(EMPLOYEE)
  active        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  stockMovement StockMovement[]
  pending       Pending[]
  sale          Sale[]
}

enum Role {
  EMPLOYEE
  ADMIN
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  phone     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sale      Sale[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  costPrice  Float?   @default(0)
  salePrice  Float?   @default(0)
  stock      Int?     @default(0)
  restock    Int?     @default(0)
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  stockMovement StockMovement[]
  pending       Pending[]
  saleDetail    SaleDetail[]
}

model StockMovement {
  id        Int       @id @default(autoincrement())
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  type      StockType
  quantity  Int
  note      String?
  users     Users     @relation(fields: [usersId], references: [id])
  usersId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum StockType {
  IN
  OUT
}

model Pending {
  id        Int              @id @default(autoincrement())
  product   Product          @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  note      String?
  users     Users            @relation(fields: [usersId], references: [id])
  usersId   Int
  type      StockPandingType
  status    PendingStatus    @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum StockPandingType {
  IN
  OUT
}

enum PendingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Sale {
  id          Int          @id @default(autoincrement())
  customer    Customer?    @relation(fields: [customerId], references: [id])
  customerId  Int?
  users       Users        @relation(fields: [userId], references: [id])
  userId      Int
  saleType    SaleType
  paymentType PaymentType
  total       Float
  note        String?
  slipImg     String?
  status      SaleStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  details     SaleDetail[]
}

enum SaleStatus {
  BORROW
  RETURNED
  PENDING
  COMPLETED
  CANCELED
}

enum SaleType {
  NORMAL
  BORROW
}

enum PaymentType {
  CASH
  TRANSFER
  ITEMS
}

model SaleDetail {
  id        Int      @id @default(autoincrement())
  sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
